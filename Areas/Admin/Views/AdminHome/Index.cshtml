@using System.Globalization
@using Microsoft.AspNetCore.Builder
@using Microsoft.AspNetCore.Localization
@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.Extensions.Options

@inject IViewLocalizer Localizer
@model WebsiteBanHang.Areas.Admin.AdminDTO.DashboardViewModel
@{
    ViewData["Title"] = "Monthly Revenue Chart";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutLteAdmin.cshtml";
}
@section css {
    <style>
        .chart {
            border: 1px solid #ccc;
            padding: 10px;
            align-items: center;
            justify-content: space-between;
        }

            .chart .col-md-2 {
                flex: 0 0 auto;
                margin-left: 1rem;
            }
    </style>

}
<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper">
    <!-- Content Header (Page header) -->
    <div class="content-header">
        <div class="container-fluid">
            <div class="row mb-2">
                <div class="col-sm-6">
                    <h1 class="m-0">Dashboard</h1>
                </div><!-- /.col -->
                <div class="col-sm-6">
                    <ol class="breadcrumb float-sm-right">
                        <li class="breadcrumb-item"><a href="#">Trang chủ</a></li>
                        <li class="breadcrumb-item active">Dashboard</li>
                    </ol>
                </div><!-- /.col -->
            </div><!-- /.row -->
        </div><!-- /.container-fluid -->
    </div>
    <!-- /.content-header -->
    <!-- Main content -->
    <section class="content">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-header">
                            <div class="row">
                                <div class="col-md-10">
                                    <h5 class="card-title">Báo cáo thống kê</h5>
                                </div>
                                <div class="col-md-2">
                                    <select class="form-control" id="selectedYear" name="selectedYear" onchange="updateChart()">
                                        @foreach (var year in ViewBag.AvailableYears)
                                        {
                                            <option value="@year" selected="@(ViewData["SelectedYear"] != null && (int)ViewData["SelectedYear"] == year)">@year</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>

                        <!-- /.card-header -->
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="chart">
                                        <canvas id="salesChart" height="350" width="920"></canvas>
                                    </div>
                                </div>
                                <div class="col-md-12 mt-3 ">
                                    <div class="chart">
                                        <canvas id="statusChart" height="350" width="920"></canvas>
                                    </div>
                                </div>
                                <div class="col-md-12 mt-3">
                                    <div class="chart">
                                        <canvas id="productBarChart" height="350" width="920"></canvas>
                                    </div>
                                </div>
                            </div>
                            <div class="row  mt-3">
                                <div class="col-4 ">
                                    <div class="chart">
                                        <canvas id="postCategoryChart" height="350" width="270"></canvas>
                                    </div>
                                </div>
                                <div class="col-8">
                                    <div class="chart">
                                        <canvas id="postCategoryviewcountChart" height="350" width="600"></canvas>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- /.col -->
                    </div>

                    <button id="exportButton" class="btn btn-primary">Xuất PDF</button>

                    <!-- /.row -->
                </div><!--/. container-fluid -->
    </section>
    <!-- /.content -->
</div>
<!-- /.content-wrapper -->
@section Scripts {
    <script>
        function updateChart() {
            var selectedYear = document.getElementById('selectedYear').value;
            window.location.href = "/admin/homeadmin?selectedYear=" + selectedYear;
        }
        // Render the charts
        var revenueLabels = @Html.Raw(Json.Serialize(Model.RevenueLabels));
        var revenueData = @Html.Raw(Json.Serialize(Model.RevenueData));
        renderSalesChart(revenueLabels, revenueData);

        var statusLabels = @Html.Raw(Json.Serialize(Model.Months));
        var statusData = @Html.Raw(Json.Serialize(Model.ChartData));
        renderStatusChart(statusLabels, statusData);

        var productLabels = @Html.Raw(Json.Serialize(Model.BrandInventories.Select(x => x.BrandName)));
        var productData = @Html.Raw(Json.Serialize(Model.BrandInventories.Select(x => x.ProductDetails.Sum(p => p.Quantity))));
        var productDetails = @Html.Raw(Json.Serialize(Model.BrandInventories.Select(x => x.ProductDetails)));
        renderProductBarChart(productLabels, productData, productDetails);


        var revenuepostLabels = @Html.Raw(Json.Serialize(Model.CategoryLabels));
        var revenuepostData = @Html.Raw(Json.Serialize(Model.PostCounts));
        renderPostCategoryChart(revenuepostLabels, revenuepostData);

        var cateroypostestLabels = @Html.Raw(Json.Serialize(Model.SelectedCategory));
        var revenuepostviewcountLabels = @Html.Raw(Json.Serialize(Model.PostNames));
        var revenuepostviewcountData = @Html.Raw(Json.Serialize(Model.PostViewCounts));
        renderPostCategoryViewCountChart(revenuepostviewcountLabels, revenuepostviewcountData, cateroypostestLabels);



        // Hàm để xuất biểu đồ thành PDF
        async function exportChartsToPDF() {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();

            // Hàm để thêm biểu đồ vào PDF
            async function addChartToPDF(doc, canvasId, x, y, maxWidth) {
                const canvas = document.getElementById(canvasId);
                const imgWidth = maxWidth;
                const imgHeight = (canvas.height * imgWidth) / canvas.width;
                const chartImage = await html2canvas(canvas);
                const chartData = chartImage.toDataURL('image/png');
                doc.addImage(chartData, 'PNG', x, y, imgWidth, imgHeight);
            }

            // Chụp và thêm biểu đồ salesChart vào PDF
            await addChartToPDF(doc, 'salesChart', 10, 10, 190);

            // Thêm trang mới cho biểu đồ statusChart
            doc.addPage();
            await addChartToPDF(doc, 'statusChart', 10, 10, 190);

            // Thêm trang mới cho biểu đồ categoryPieChart
            doc.addPage();
            await addChartToPDF(doc, 'productBarChart', 10, 10, 190);

            // Thêm trang mới cho biểu đồ productBarChart
            doc.addPage();
            await addChartToPDF(doc, 'postCategoryChart', 10, 10, 190);

            // Thêm trang mới cho biểu đồ productBarChart
            doc.addPage();
            await addChartToPDF(doc, 'postCategoryviewcountChart', 10, 10, 190);

            // Lưu file PDF
            doc.save('charts.pdf');
        }

        // Gán sự kiện click cho nút xuất PDF
        document.getElementById('exportButton').addEventListener('click', exportChartsToPDF);



    </script>
}